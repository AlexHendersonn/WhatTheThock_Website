import { HandlerContext, HandlerEvent, HandlerResponse } from '@netlify/functions';
export declare class NetlifyIntegrationError extends Error {
    constructor(message: string);
}
export type FunctionHandler<Context = any> = (event: HandlerEvent, context: HandlerContext & Context) => Promise<HandlerResponse>;
export type IntegrationHandlerConfig<Config = any> = {
    [key: string]: {
        [key: string]: unknown;
    };
} & Config;
export type IntegrationHandler<Context = any, Config = any> = (handler: FunctionHandler<Context>, config?: Config) => FunctionHandler<HandlerContext>;
type ExtractContextTypes<HandlerTypes extends unknown[]> = HandlerTypes extends [infer Handler, ...infer Remaining] ? Handler extends IntegrationHandler<infer ContextType, infer _> ? ContextType & ExtractContextTypes<Remaining> : unknown : unknown;
type ExtractConfigTypes<HandlerTypes extends unknown[]> = HandlerTypes extends [infer Handler, ...infer Remaining] ? Handler extends IntegrationHandler<infer _, infer ConfigType> ? ConfigType & ExtractConfigTypes<Remaining> : unknown : unknown;
export declare const wrap: <T extends IntegrationHandler<any, any>[]>(...handlers: T) => (functionHandler: (event: HandlerEvent, context: HandlerContext & ExtractContextTypes<T>) => Promise<HandlerResponse>, config?: ExtractConfigTypes<T>) => FunctionHandler<HandlerContext>;
export {};
