import { IntegrationHandler, FunctionHandler } from "@netlify/integrations";
import {
  claimToArray,
  IdentityContext,
  NetlifyJwtVerifier,
} from "@serverless-jwt/netlify";

type Auth0Context = {
  identityContext?: IdentityContext;
};

type Auth0Configuration = {
  auth0?: {
    roles?: string[];
    required?: boolean;
  };
};
type IntegrationType = IntegrationHandler<Auth0Context, Auth0Configuration>;
type Auth0ReturnType = ReturnType<ReturnType<IntegrationType>>;

export const withAuth0: IntegrationType = (handler, config) => {
  const { AUTH0_ISSUER, AUTH0_AUDIENCE } = process.env;
  if (!AUTH0_ISSUER || !AUTH0_AUDIENCE) {
    throw new Error("Auth0 is not configured correctly.");
  }

  const verifyJwt = NetlifyJwtVerifier({
    issuer: AUTH0_ISSUER,
    audience: AUTH0_AUDIENCE,
    mapClaims: async (claims) => {
      const user = claims;
      user.scope = claimToArray(
        typeof user.scope === "string" ? user.scope : ""
      );
      return user;
    },
  });

  const innerHandler: FunctionHandler<Auth0Context> = async (
    event,
    context
  ) => {
    if (!config) {
      return handler(event, context);
    }

    const { roles, required } = config.auth0 ?? {};

    if (!context.identityContext) {
      if (required) {
        return {
          statusCode: 401,
        };
      }
    }

    const { claims } = context.identityContext ?? {};

    if (roles) {
      const scope = (claims?.scope as string[]) ?? [];

      if (!roles.some((role) => scope.includes(role))) {
        return {
          statusCode: 403,
        };
      }
    }

    return handler(event, context);
  };

  return async (event, context) => {
    const authorisationHeader =
      event.headers["Authorization"] || event.headers["authorization"];

    const { required } = config?.auth0 ?? {};

    if (!authorisationHeader) {
      if (required) {
        return {
          statusCode: 401,
          body: JSON.stringify({
            message: "Authorization header is required",
          }),
        };
      } else {
        return innerHandler(event, context);
      }
    }

    return verifyJwt(innerHandler)(
      event,
      context,
      null
    ) as unknown as Auth0ReturnType;
  };
};
