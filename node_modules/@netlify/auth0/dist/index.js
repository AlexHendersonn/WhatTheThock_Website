var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { claimToArray, NetlifyJwtVerifier, } from "@serverless-jwt/netlify";
export const withAuth0 = (handler, config) => {
    const { AUTH0_ISSUER, AUTH0_AUDIENCE } = process.env;
    if (!AUTH0_ISSUER || !AUTH0_AUDIENCE) {
        throw new Error("Auth0 is not configured correctly.");
    }
    const verifyJwt = NetlifyJwtVerifier({
        issuer: AUTH0_ISSUER,
        audience: AUTH0_AUDIENCE,
        mapClaims: (claims) => __awaiter(void 0, void 0, void 0, function* () {
            const user = claims;
            user.scope = claimToArray(typeof user.scope === "string" ? user.scope : "");
            return user;
        }),
    });
    const innerHandler = (event, context) => __awaiter(void 0, void 0, void 0, function* () {
        var _a, _b, _c;
        if (!config) {
            return handler(event, context);
        }
        const { roles, required } = (_a = config.auth0) !== null && _a !== void 0 ? _a : {};
        if (!context.identityContext) {
            if (required) {
                return {
                    statusCode: 401,
                };
            }
        }
        const { claims } = (_b = context.identityContext) !== null && _b !== void 0 ? _b : {};
        if (roles) {
            const scope = (_c = claims === null || claims === void 0 ? void 0 : claims.scope) !== null && _c !== void 0 ? _c : [];
            if (!roles.some((role) => scope.includes(role))) {
                return {
                    statusCode: 403,
                };
            }
        }
        return handler(event, context);
    });
    return (event, context) => __awaiter(void 0, void 0, void 0, function* () {
        var _d;
        const authorisationHeader = event.headers["Authorization"] || event.headers["authorization"];
        const { required } = (_d = config === null || config === void 0 ? void 0 : config.auth0) !== null && _d !== void 0 ? _d : {};
        if (!authorisationHeader) {
            if (required) {
                return {
                    statusCode: 401,
                    body: JSON.stringify({
                        message: "Authorization header is required",
                    }),
                };
            }
            else {
                return innerHandler(event, context);
            }
        }
        return verifyJwt(innerHandler)(event, context, null);
    });
};
