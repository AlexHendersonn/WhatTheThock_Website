"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetlifyJwtVerifier = void 0;
var jwt_verifier_1 = require("@serverless-jwt/jwt-verifier");
/**
 * Return a JSON response.
 * @param statusCode
 * @param body
 */
var json = function (statusCode, body) {
    return {
        statusCode: statusCode,
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
    };
};
/**
 * Middleware to validate a token and set the user context.
 */
var validateJWT = function (verifier, options) {
    return function (handler) { return function (event, context, cb) { return __awaiter(void 0, void 0, void 0, function () {
        var claims, accessToken, err_1, ctx;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    accessToken = jwt_verifier_1.getTokenFromHeader(event.headers.authorization);
                    return [4 /*yield*/, verifier.verifyAccessToken(accessToken)];
                case 1:
                    claims = _a.sent();
                    return [3 /*break*/, 3];
                case 2:
                    err_1 = _a.sent();
                    if (typeof options.handleError !== 'undefined' && options.handleError !== null) {
                        return [2 /*return*/, options.handleError(err_1)];
                    }
                    return [2 /*return*/, json(401, {
                            error: err_1.code,
                            error_description: err_1.message
                        })];
                case 3:
                    ctx = {
                        token: accessToken,
                        claims: claims
                    };
                    context.identityContext = ctx;
                    // Continue.
                    return [2 /*return*/, handler(event, context, cb)];
            }
        });
    }); }; };
};
/**
 * Create a JWT verifier handler.
 * @param options
 */
exports.NetlifyJwtVerifier = function (options) {
    var verifier = new jwt_verifier_1.JwtVerifier(options);
    return validateJWT(verifier, options);
};
var jwt_verifier_2 = require("@serverless-jwt/jwt-verifier");
Object.defineProperty(exports, "claimToArray", { enumerable: true, get: function () { return jwt_verifier_2.claimToArray; } });
Object.defineProperty(exports, "removeNamespaces", { enumerable: true, get: function () { return jwt_verifier_2.removeNamespaces; } });
Object.defineProperty(exports, "getTokenFromHeader", { enumerable: true, get: function () { return jwt_verifier_2.getTokenFromHeader; } });
//# sourceMappingURL=index.js.map