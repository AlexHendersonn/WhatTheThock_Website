"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var lru_memoizer_1 = __importDefault(require("lru-memoizer"));
var limiter_1 = require("limiter");
var errors_1 = require("./errors");
var metadata_1 = __importDefault(require("./metadata"));
var utils_1 = require("./utils");
var KeyStore = /** @class */ (function () {
    function KeyStore(options) {
        var _this = this;
        this.metadataClient = new metadata_1.default(options.issuer);
        // Hack to solve typing issues.
        var cache = lru_memoizer_1.default;
        // Rate limiter to prevent taking the service down.
        var limiter = new limiter_1.RateLimiter(options.requestsPerMinute, 'minute', true);
        // Add a caching function to make sure we're not adding too much of a delay when validating tokens.
        this.getKeyCached = cache({
            load: function (kid, callback) {
                limiter.removeTokens(1, function (limiterErr, remaining) {
                    if (limiterErr) {
                        if (typeof limiterErr === 'string') {
                            var message = limiterErr;
                            throw new Error(message);
                        }
                        return callback(limiterErr);
                    }
                    if (remaining < 0) {
                        return callback(new errors_1.JwtVerifierError('jwks_rate_limit', "Too many requests have been made to the JSON Web Key Set endpoint (last kid: '" + kid + "')"));
                    }
                    return _this.getSigningKeys()
                        .then(function (keys) {
                        var key = keys.find(function (k) { return k.kid === kid; });
                        if (!key) {
                            return callback(new errors_1.JwtVerifierError('jwks_kid_error', "Unable to find key '" + kid + "' in the JSON Web Key Set"));
                        }
                        return callback(null, key);
                    })
                        .catch(function (metadataErr) { return callback(metadataErr); });
                });
            },
            hash: function (kid) { return kid; },
            maxAge: options.cacheTTL,
            max: options.cacheSize
        });
    }
    /**
     * Get all usable keys from the JSON Web Key endpoint.
     */
    KeyStore.prototype.getSigningKeys = function () {
        return __awaiter(this, void 0, void 0, function () {
            function parseKey(signingKey) {
                if (typeof signingKey.x5c !== 'undefined' && signingKey.x5c !== null && signingKey.x5c.length) {
                    return utils_1.certToPEM(signingKey.x5c[0]);
                }
                return utils_1.rsaPublicKeyToPEM(signingKey.n, signingKey.e);
            }
            var keys, signingKeys;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.metadataClient.getJsonWebKeySet()];
                    case 1:
                        keys = _a.sent();
                        signingKeys = keys.filter(function (key) {
                            if (typeof key.use !== 'undefined' && key.use !== null && key.use !== 'sig') {
                                return false;
                            }
                            return key.kty === 'RSA' && ((key.x5c && key.x5c.length) || (key.n && key.e));
                        });
                        if (!signingKeys.length) {
                            throw new errors_1.JwtVerifierError('jwks_error', "Unable to find key any usable keys in the JSON Web Key Set");
                        }
                        return [2 /*return*/, signingKeys.map(function (signingKey) {
                                var jwk = {
                                    kid: signingKey.kid,
                                    nbf: signingKey.nbf,
                                    key: parseKey(signingKey)
                                };
                                return jwk;
                            })];
                }
            });
        });
    };
    /**
     * Get a JSON Web Key from the cache.
     * @param kid
     */
    KeyStore.prototype.getKey = function (kid) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            _this.getKeyCached(kid, function (err, key) {
                if (err) {
                    return reject(err);
                }
                return resolve(key);
            });
        });
    };
    return KeyStore;
}());
exports.default = KeyStore;
//# sourceMappingURL=keystore.js.map