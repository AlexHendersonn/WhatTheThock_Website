"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.semaphore = exports.rsaPublicKeyToPEM = exports.certToPEM = void 0;
function prepadSigned(hexStr) {
    var msb = hexStr[0];
    if (msb < '0' || msb > '7') {
        return "00" + hexStr;
    }
    return hexStr;
}
function toHex(number) {
    var nstr = number.toString(16);
    if (nstr.length % 2) {
        return "0" + nstr;
    }
    return nstr;
}
function encodeLengthHex(n) {
    if (n <= 127) {
        return toHex(n);
    }
    var nHex = toHex(n);
    var lengthOfLengthByte = 128 + nHex.length / 2;
    return toHex(lengthOfLengthByte) + nHex;
}
function certToPEM(cert) {
    var match = cert.match(/.{1,64}/g);
    if (!match) {
        throw new TypeError('Invalid cert');
    }
    return "-----BEGIN CERTIFICATE-----\n" + match.join('\n') + "\n-----END CERTIFICATE-----\n";
}
exports.certToPEM = certToPEM;
/*
 * Source: http://stackoverflow.com/questions/18835132/xml-to-pem-in-node-js
 */
function rsaPublicKeyToPEM(modulusB64, exponentB64) {
    var modulus = Buffer.from(modulusB64, 'base64');
    var exponent = Buffer.from(exponentB64, 'base64');
    var modulusHex = prepadSigned(modulus.toString('hex'));
    var exponentHex = prepadSigned(exponent.toString('hex'));
    var modlen = modulusHex.length / 2;
    var explen = exponentHex.length / 2;
    var encodedModlen = encodeLengthHex(modlen);
    var encodedExplen = encodeLengthHex(explen);
    var encodedPubkey = "30" + encodeLengthHex(modlen + explen + encodedModlen.length / 2 + encodedExplen.length / 2 + 2) + "02" + encodedModlen + modulusHex + "02" + encodedExplen + exponentHex;
    var der = Buffer.from(encodedPubkey, 'hex').toString('base64');
    var match = der.match(/.{1,64}/g);
    if (!match) {
        throw new TypeError('Invalid cert');
    }
    return "-----BEGIN RSA PUBLIC KEY-----\n" + match.join('\n') + "\n-----END RSA PUBLIC KEY-----\n";
}
exports.rsaPublicKeyToPEM = rsaPublicKeyToPEM;
function semaphore() {
    var running;
    return function instance(fn) {
        if (running) {
            var res = running.then(function () { return fn(); });
            running = res.then(function () { return undefined; });
            return res;
        }
        running = fn();
        return running;
    };
}
exports.semaphore = semaphore;
//# sourceMappingURL=utils.js.map