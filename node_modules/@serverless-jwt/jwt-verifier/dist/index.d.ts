import { DecodedToken } from './types';
import { JwtVerifierOptions } from './config';
export { JwtVerifierOptions } from './config';
export { ConfigurationError, JwtVerifierError } from './errors';
export declare class JwtVerifier {
    private keyStore;
    private options;
    constructor(options: JwtVerifierOptions);
    /**
     * Dynamically provide a key when validating a token.
     * @param header
     * @param cb
     */
    private keyProvider;
    /**
     * Verify an access token.
     * @param jwt
     */
    verifyAccessToken(jwt: string): Promise<DecodedToken>;
}
/**
 * Helper to convert a claim value to an array.
 */
export declare function claimToArray(val: string): Array<string>;
/**
 * Helper to remove namespaces from your claims.
 */
export declare function removeNamespaces(namespace: string, claims: Record<string, unknown>): Record<string, unknown>;
/**
 * Get the token from the Authorization header
 * @param header
 */
export declare function getTokenFromHeader(header: string): string;
