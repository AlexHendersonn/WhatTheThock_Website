"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTokenFromHeader = exports.removeNamespaces = exports.claimToArray = exports.JwtVerifier = void 0;
var jsonwebtoken_1 = require("jsonwebtoken");
var keystore_1 = __importDefault(require("./keystore"));
var errors_1 = require("./errors");
var config_1 = require("./config");
var errors_2 = require("./errors");
Object.defineProperty(exports, "ConfigurationError", { enumerable: true, get: function () { return errors_2.ConfigurationError; } });
Object.defineProperty(exports, "JwtVerifierError", { enumerable: true, get: function () { return errors_2.JwtVerifierError; } });
var JwtVerifier = /** @class */ (function () {
    function JwtVerifier(options) {
        var _this = this;
        /**
         * Dynamically provide a key when validating a token.
         * @param header
         * @param cb
         */
        this.keyProvider = function (header, cb) { return __awaiter(_this, void 0, void 0, function () {
            var jwk, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        if (typeof header === 'undefined' || header === null) {
                            throw new errors_1.JwtVerifierError('jwt_invalid', "The provided token does not contain a header");
                        }
                        if (typeof header.kid !== 'string' || header.kid === null) {
                            throw new errors_1.JwtVerifierError('jwt_invalid', "The provided token does not contain a valid 'kid' claim, got '" + typeof header.kid + "'");
                        }
                        return [4 /*yield*/, this.keyStore.getKey(header.kid)];
                    case 1:
                        jwk = _a.sent();
                        return [2 /*return*/, cb(null, jwk.key)];
                    case 2:
                        err_1 = _a.sent();
                        return [2 /*return*/, cb(err_1)];
                    case 3: return [2 /*return*/];
                }
            });
        }); };
        config_1.validateConfiguration(options);
        this.options = options;
        this.keyStore = new keystore_1.default({
            requestsPerMinute: 10,
            cacheSize: 10,
            cacheTTL: 10 * 60000,
            issuer: options.issuer
        });
    }
    /**
     * Verify an access token.
     * @param jwt
     */
    JwtVerifier.prototype.verifyAccessToken = function (jwt) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            try {
                if (typeof jwt === 'undefined' || jwt === null) {
                    return reject(new errors_1.JwtVerifierError('jwt_missing', 'No token provided'));
                }
                var decoded = jsonwebtoken_1.decode(jwt, { complete: true });
                if (decoded === null || decoded.header === null) {
                    return reject(new errors_1.JwtVerifierError('jwt_invalid', 'Invalid token provided'));
                }
                if (decoded.header.alg !== 'RS256') {
                    return reject(new errors_1.JwtVerifierError('jwt_invalid', "Invalid 'alg' provided, got '" + decoded.header.alg + "'"));
                }
                if (decoded.payload.iss !== _this.options.issuer) {
                    return reject(new errors_1.JwtVerifierError('jwt_invalid', "Invalid issuer (iss) provided, got '" + decoded.payload.iss + "'"));
                }
                var audience = Array.isArray(decoded.payload.aud) ? decoded.payload.aud : [decoded.payload.aud];
                if (audience.indexOf(_this.options.audience) === -1) {
                    return reject(new errors_1.JwtVerifierError('jwt_invalid', "Invalid audience (aud) provided, got '" + audience.join(', ') + "'"));
                }
            }
            catch (e) {
                return reject(new errors_1.JwtVerifierError('unknown_error', e.message));
            }
            return jsonwebtoken_1.verify(jwt, _this.keyProvider, { audience: _this.options.audience, issuer: _this.options.issuer }, function (err, decoded) { return __awaiter(_this, void 0, void 0, function () {
                var expiration, date, claims, e_1;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            if (err) {
                                // Token expired, change the error.
                                if (err.name === 'TokenExpiredError') {
                                    expiration = err.expiredAt;
                                    if (expiration) {
                                        return [2 /*return*/, reject(new errors_1.JwtVerifierError('jwt_expired', "The provided token expired at '" + expiration.toISOString() + "'"))];
                                    }
                                    return [2 /*return*/, reject(new errors_1.JwtVerifierError('jwt_expired', "The provided token expired"))];
                                }
                                // Token cannot be used yet, change the error.
                                if (err.name === 'NotBeforeError') {
                                    date = err.date;
                                    if (date) {
                                        return [2 /*return*/, reject(new errors_1.JwtVerifierError('jwt_invalid', "The provided token cannot be used before '" + date.toISOString() + "'"))];
                                    }
                                    return [2 /*return*/, reject(new errors_1.JwtVerifierError('jwt_invalid', "The provided token cannot be used yet"))];
                                }
                                return [2 /*return*/, reject(new errors_1.JwtVerifierError('jwt_invalid', err.message))];
                            }
                            claims = decoded;
                            if (!this.options.mapClaims) return [3 /*break*/, 4];
                            _a.label = 1;
                        case 1:
                            _a.trys.push([1, 3, , 4]);
                            return [4 /*yield*/, this.options.mapClaims(claims)];
                        case 2:
                            claims = _a.sent();
                            if (typeof claims === 'undefined' || claims === null) {
                                return [2 /*return*/, reject(new errors_1.JwtVerifierError('claims_mapping', 'The mapClaims function returned an empty object'))];
                            }
                            return [3 /*break*/, 4];
                        case 3:
                            e_1 = _a.sent();
                            return [2 /*return*/, reject(new errors_1.JwtVerifierError('claims_mapping', e_1.message))];
                        case 4: return [2 /*return*/, resolve(claims)];
                    }
                });
            }); });
        });
    };
    return JwtVerifier;
}());
exports.JwtVerifier = JwtVerifier;
/**
 * Helper to convert a claim value to an array.
 */
function claimToArray(val) {
    if (typeof val === 'undefined' || val === null) {
        return [];
    }
    if (Array.isArray(val)) {
        return val;
    }
    if (typeof val !== 'string') {
        return [val];
    }
    return Array.from(val.split(' '));
}
exports.claimToArray = claimToArray;
/**
 * Helper to remove namespaces from your claims.
 */
function removeNamespaces(namespace, claims) {
    return Object.entries(claims)
        .map(function (_a) {
        var key = _a[0], value = _a[1];
        return [key.replace(namespace, ''), value];
    })
        .reduce(function (acc, cur) {
        var key = cur[0], value = cur[1];
        acc[key] = value;
        return acc;
    }, {});
}
exports.removeNamespaces = removeNamespaces;
/**
 * Get the token from the Authorization header
 * @param header
 */
function getTokenFromHeader(header) {
    if (typeof header === 'undefined' || header === null) {
        throw new errors_1.JwtVerifierError('invalid_header', "The Authorization header is missing or empty");
    }
    var parts = header.split(' ');
    if (parts.length !== 2 || parts[0] !== 'Bearer') {
        throw new errors_1.JwtVerifierError('invalid_header', "Unsupported format for the Authorization header");
    }
    return parts[1];
}
exports.getTokenFromHeader = getTokenFromHeader;
//# sourceMappingURL=index.js.map