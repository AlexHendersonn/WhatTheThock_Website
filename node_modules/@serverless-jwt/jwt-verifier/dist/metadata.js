"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var wretch_1 = __importDefault(require("wretch"));
var node_fetch_1 = __importDefault(require("node-fetch"));
var http_1 = require("http");
var url_1 = require("url");
var cjs_ponyfill_1 = require("abortcontroller-polyfill/dist/cjs-ponyfill");
var utils_1 = require("./utils");
var errors_1 = require("./errors");
function get(url) {
    return new Promise(function (resolve, reject) {
        wretch_1.default(url)
            .polyfills({ fetch: cjs_ponyfill_1.abortableFetch(node_fetch_1.default).fetch, URLSearchParams: url_1.URLSearchParams, AbortController: cjs_ponyfill_1.AbortController })
            .get()
            .setTimeout(10000)
            .json()
            .then(function (res) { return resolve(res); })
            .catch(function (e) {
            if (e.name === 'AbortError') {
                return reject(new errors_1.JwtVerifierError('timeout_error', "Failed to fetch '" + url + "': Request timed out"));
            }
            if (e.status) {
                return reject(new errors_1.JwtVerifierError('http_error', "Failed to fetch '" + url + "': " + e.status + " " + http_1.STATUS_CODES[e.status]));
            }
            return reject(new errors_1.JwtVerifierError('network_error', "Failed to fetch '" + url + "': " + (e.code || e.errno || e.message)));
        });
    });
}
var MetadataClient = /** @class */ (function () {
    function MetadataClient(issuer, jwksUri) {
        this.jwksUri = jwksUri;
        this.baseUrl = issuer.replace(/\/$/, '');
        this.metadataSemaphore = utils_1.semaphore();
    }
    /**
     * Get the OpenID configuration.
     */
    MetadataClient.prototype.getOpenIdConfiguration = function () {
        var metadataUrl = this.baseUrl + "/.well-known/openid-configuration";
        return get(metadataUrl);
    };
    /**
     * Get the JSON Web Key Set url (from config or from metadata).
     */
    MetadataClient.prototype.getJsonWebKeySetUrl = function () {
        return __awaiter(this, void 0, void 0, function () {
            var metadata;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (typeof this.jwksUri !== 'undefined' && this.jwksUri !== null) {
                            return [2 /*return*/, this.jwksUri];
                        }
                        return [4 /*yield*/, this.metadataSemaphore(function () { return _this.getOpenIdConfiguration(); })];
                    case 1:
                        metadata = _a.sent();
                        if (typeof metadata.jwks_uri === 'undefined' || metadata.jwks_uri === null) {
                            throw new errors_1.JwtVerifierError('openid_configuration', 'The OpenID configuration endpoint does not contain a valid jwks_uri');
                        }
                        this.jwksUri = metadata.jwks_uri;
                        return [2 /*return*/, this.jwksUri];
                }
            });
        });
    };
    /**
     * Get the JSON Web Key Set.
     */
    MetadataClient.prototype.getJsonWebKeySet = function () {
        return __awaiter(this, void 0, void 0, function () {
            var jwksUri, res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getJsonWebKeySetUrl()];
                    case 1:
                        jwksUri = _a.sent();
                        return [4 /*yield*/, get(jwksUri)];
                    case 2:
                        res = _a.sent();
                        if (!res.keys) {
                            throw new errors_1.JwtVerifierError('jwks_error', 'The JSON Web Key Set does not contain any keys');
                        }
                        return [2 /*return*/, res.keys];
                }
            });
        });
    };
    return MetadataClient;
}());
exports.default = MetadataClient;
//# sourceMappingURL=metadata.js.map